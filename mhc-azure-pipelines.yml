

trigger:
  branches:
      include:
      - dev
      - qa
      - master

stages:
- stage: Dev
  displayName: Publish Terraform Manifests
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/dev')
  variables:
      - group: Terraform
  jobs:
    - job: Publish
      continueOnError: false
      steps:
      - task: PublishPipelineArtifact@1
        displayName: Copy Terraform Manifests
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/Terraform/dev'
          artifact: 'terraform-manifests'
          publishLocation: 'pipeline'
    - deployment: Provision
      displayName: 'Provision MHC AKS Dev Infrastructure Environment'
      dependsOn: Publish
      pool:
        vmImage: 'ubuntu-16.04'
      environment: dev
      strategy:
        runOnce:
         deploy:
          steps:
          - task: DownloadSecureFile@1
            displayName: Download SSH Key
            name: sshkey
            inputs:
              secureFile: 'ask-akssshkey2.pub'
          # - script: |
          #     # Exit when any command returns a failure status.
          #     set -e
          #     # Write terraform.tfvars.
          #     echo 'resource_group_location = "'$(ResourceGroupLocation)'"' | tee terraform.tfvars
          #     # Write backend.tfvars.
          #     echo 'resource_group_name = "TFStateFile-rg"' | tee backend.tfvars
          #     echo 'storage_account_name = "'$(StorageAccountName)'"' | tee -a backend.tfvars
          #     echo 'container_name = "tfstatefiles"' | tee -a backend.tfvars
          #     echo 'key = "dev-terraform.tfstate"' | tee -a backend.tfvars
          #     # Initialize Terraform.
          #     terraform init -input=false -backend-config="backend.tfvars"
          #     echo "*********** Create or select workspace"
          #     terraform workspace select "$(Env1)" || terraform workspace new "$(Env1)"
          #     #Run terraform plan
          #     terraform plan -var ssh_public_key=$(sshkey.secureFilePath) -out dev.tfplan
          #     # Apply the Terraform plan.
          #     terraform apply dev.tfplan
          #     # Get the App Service name for the dev environment.
          #     MHCPublicIPDev=$(terraform output public_ip)
          #     # Write the MHCPublicIPDev variable to the pipeline.
          #     echo "##vso[task.setvariable variable=MHCPublicIPDev;isOutput=true]$MHCPublicIPDev"
          #   workingDirectory: '$(Pipeline.Workspace)/terraform-manifests'  
          #   name: 'RunTerraform'
          #   displayName: 'Run Terraform'
          #   env:
          #     ARM_CLIENT_ID: $(ARM_CLIENT_ID)
          #     ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
          #     ARM_TENANT_ID: $(ARM_TENANT_ID)
          #     ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)  
    - job: Build
      continueOnError: false
      dependsOn: Provision
      steps:
      - task: replacetokens@3
        displayName: 'Replace tokens in appsettings.json'
        inputs:
          rootDirectory: '$(System.DefaultWorkingDirectory)/src/MyHealth.Web'
          targetFiles: 'appsettings.json'
          escapeType: none
          tokenPrefix: '__'
          tokenSuffix: '__'
      - task: replacetokens@3
        displayName: 'Replace tokens in mhc-aks.yaml'
        inputs:
          rootDirectory: '$(System.DefaultWorkingDirectory)/Manifests/'
          targetFiles: 'mhc-aks.yaml'
          escapeType: none
          tokenPrefix: '__'
          tokenSuffix: '__'

      - task: DockerCompose@0
        displayName: 'Run services'
        inputs:
          dockerComposeFile: 'docker-compose.ci.build.yml'
          action: 'Run services'
          detached: false

      - task: DockerCompose@0
        displayName: 'Build services'
        inputs:
          dockerComposeFile: 'docker-compose.yml'
          dockerComposeFileArgs: 'DOCKER_BUILD_SOURCE='
          action: 'Build services'
          additionalImageTags: '$(Build.BuildId)'
          containerregistrytype: Azure Container Registry
          azureContainerRegistry: '$(ACR)'
          azureSubscriptionEndpoint: 'MHC_terraform Lab'

      - task: DockerCompose@0
        displayName: 'Push services'
        inputs:
          dockerComposeFile: 'docker-compose.yml'
          dockerComposeFileArgs: 'DOCKER_BUILD_SOURCE='
          action: 'Push services'
          additionalImageTags: '$(Build.BuildId)'
          containerregistrytype: Azure Container Registry
          azureContainerRegistry: '$(ACR)'
          azureSubscriptionEndpoint: 'MHC_terraform Lab'

      - task: DockerCompose@0
        displayName: 'Lock services'
        inputs:
          dockerComposeFile: 'docker-compose.yml'
          dockerComposeFileArgs: 'DOCKER_BUILD_SOURCE='
          action: 'Lock services'
          containerregistrytype: Azure Container Registry
          azureContainerRegistry: '$(ACR)'
          azureSubscriptionEndpoint: 'MHC_terraform Lab'
      - task: CopyFiles@2
        inputs:
          Contents: |
            **/Manifests/*
            **/*.dacpac
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'deploy'
          publishLocation: 'Container'          

    - deployment: DeployDacPac
      displayName: 'DeployDacPac'
      dependsOn: Build
      pool:
        vmImage: 'windows-2019'
      environment: dev
      strategy:
        runOnce:
         deploy:
          steps:
          - download: current
            artifact: deploy
          # - task: SqlAzureDacpacDeployment@1
          #   displayName: Execute Azure SQL DacpacTask
          #   inputs:
          #     azureSubscription: 'MHC_terraform Lab'
          #     AuthenticationType: 'server'
          #     ServerName: '$(SQLserver)'
          #     DatabaseName: 'mhcdb'
          #     SqlUsername: '$(SQLuser)'
          #     SqlPassword: '$(SQLPassword)'
          #     deployType: 'DacpacTask'
          #     DeploymentAction: 'Publish'
          #     DacpacFile: '$(Pipeline.Workspace)/deploy/myhealthclinic.dacpac'
          #     IpDetectionMethod: 'AutoDetect'
    - deployment: DeployAppsToAKS
      displayName: 'DeployAppsToAKS'
      dependsOn: DeployDacPac
      variables:
      - group: Terraform
      pool:
        vmImage: 'ubuntu-16.04'
      environment: dev
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: deploy          
            - task: HelmInstaller@1
              displayName: Install Helm
              inputs:
                helmVersionToInstall: 'latest'

            - task: Kubernetes@1
              displayName: Create ingress namespace
              inputs:
                connectionType: 'Azure Resource Manager'
                azureSubscriptionEndpoint: 'MHC_terraform Lab'
                azureResourceGroup: $(AzureResourceGroup)
                kubernetesCluster: $(DevCluster)
                useClusterAdmin: true
                command: 'create'
                arguments: 'namespace ingress-basic'

            - task: Bash@3
              displayName: "Add nginx Helm Repo"
              inputs:
                targetType: 'inline'
                script: 'helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx'

            - task: HelmDeploy@0
              displayName: Install Nginx
              inputs:
                connectionType: 'Azure Resource Manager'
                azureSubscription: 'MHC_terraform Lab'
                azureResourceGroup: 'ask-dev-mhc-rg'
                kubernetesCluster: 'ask-dev-mhc-rg-cluster01'
                useClusterAdmin: true
                namespace: 'ingress-basic'
                command: 'install'
                chartType: 'Name'
                chartName: 'ingress-nginx/ingress-nginx'
                arguments: '--set controller.replicaCount=2 --set controller.service.loadBalancerIP="51.132.42.220" --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux'

            - task: Kubernetes@1
              displayName: Create custom resources
              inputs:
                connectionType: 'Azure Resource Manager'
                azureSubscriptionEndpoint: 'MHC_terraform Lab'
                azureResourceGroup: $(AzureResourceGroup)
                kubernetesCluster: $(DevCluster)
                useClusterAdmin: true
                command: 'apply'
                arguments: '--validate=false -f https://raw.githubusercontent.com/jetstack/cert-manager/release-0.13/deploy/manifests/00-crds.yaml'

            - task: Bash@3
              displayName: "Add nginx Helm jetstack Repo"
              inputs:
                targetType: 'inline'
                script: 'helm repo add jetstack https://charts.jetstack.io'

            - task: Bash@3
              displayName: "Helm Repo update"
              inputs:
                targetType: 'inline'
                script: 'helm repo update'

            - task: HelmDeploy@0
              displayName: Install cert-manager
              inputs:
                connectionType: 'Azure Resource Manager'
                azureSubscription: 'MHC_terraform Lab'
                azureResourceGroup: 'ask-dev-mhc-rg'
                kubernetesCluster: 'ask-dev-mhc-rg-cluster01'
                useClusterAdmin: true
                namespace: 'ingress-basic'
                command: 'install'
                chartType: 'Name'
                chartName: 'jetstack/cert-manager'
                arguments: '--version v0.13.0'
            - task: DownloadSecureFile@1
              displayName: Download Azure Json
              name: Azjson
              inputs:
                secureFile: 'azure.json'
            - task: Kubernetes@1
              displayName: Create Kubernetes secret
              inputs:
                connectionType: 'Azure Resource Manager'
                azureSubscriptionEndpoint: 'MHC_terraform Lab'
                azureResourceGroup: $(AzureResourceGroup)
                kubernetesCluster: $(DevCluster)
                useClusterAdmin: true
                command: 'create'
                arguments: 'secret generic azure-config-file --from-file=$(Azjson.secureFilePath)'           

            - task: Kubernetes@1
              displayName: Apply cluster issuer
              inputs:
                connectionType: 'Azure Resource Manager'
                azureSubscriptionEndpoint: 'MHC_terraform Lab'
                azureResourceGroup: $(AzureResourceGroup)
                kubernetesCluster: $(DevCluster)
                useClusterAdmin: true
                command: 'apply'
                arguments: '-f $(Pipeline.Workspace)/deploy/Manifests/clusterissuer.yaml'

            - task: Kubernetes@1
              displayName: Deploy External-DNS
              inputs:
                connectionType: 'Azure Resource Manager'
                azureSubscriptionEndpoint: 'MHC_terraform Lab'
                azureResourceGroup: $(AzureResourceGroup)
                kubernetesCluster: $(DevCluster)
                useClusterAdmin: true
                command: 'apply'
                arguments: '-f $(Pipeline.Workspace)/deploy/Manifests/external-dns.yaml'    

            - task: Kubernetes@1
              displayName: Deploy MHC Apps
              inputs:
                connectionType: 'Azure Resource Manager'
                azureSubscriptionEndpoint: 'MHC_terraform Lab'
                azureResourceGroup: $(AzureResourceGroup)
                kubernetesCluster: $(DevCluster)
                useClusterAdmin: true
                command: 'apply'
                arguments: '-f $(Pipeline.Workspace)/deploy/Manifests/mhc-aks.yaml'
                secretType: 'dockerRegistry'
                containerRegistryType: 'Azure Container Registry'
                azureSubscriptionEndpointForSecrets: 'MHC_terraform Lab'
                azureContainerRegistry: '$(ACR)'
                secretName: 'acrsecret'
                workingDirectory: '$(Pipeline.Workspace)/deploy/Manifests'

            - task: Kubernetes@1
              displayName: Deploy Ingress-SSL
              inputs:
                connectionType: 'Azure Resource Manager'
                azureSubscriptionEndpoint: 'MHC_terraform Lab'
                azureResourceGroup: $(AzureResourceGroup)
                kubernetesCluster: $(DevCluster)
                useClusterAdmin: true
                command: 'apply'
                arguments: '-f $(Pipeline.Workspace)/deploy/Manifests/ingress-ssl.yaml'         