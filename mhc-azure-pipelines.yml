

trigger:
  branches:
      include:
      - dev/*
      - qa
      - master
      - build-docker-image

stages:
- stage: Dev
  displayName: Publish Terraform Manifests
  jobs:
    - job: Publish
      continueOnError: false
      steps:
      - task: PublishPipelineArtifact@1
        displayName: Copy Terraform Manifests
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/Terraform/dev'
          artifact: 'terraform-manifests'
          publishLocation: 'pipeline'
    - deployment: Provision
      displayName: 'Provision MHC AKS Dev Infrastructure Environment'
      pool:
        vmImage: 'ubuntu-16.04'
      environment: dev
      strategy:
        runOnce:
         deploy:
          steps:
          - task: DownloadSecureFile@1
            displayName: Download SSH Key
            name: sshkey
            inputs:
              secureFile: 'ask-akssshkey2.pub'
          - script: |
              # Exit when any command returns a failure status.
              set -e
              # Write terraform.tfvars.
              echo 'resource_group_location = "'$(ResourceGroupLocation)'"' | tee terraform.tfvars
              # Write backend.tfvars.
              echo 'resource_group_name = "TFStateFile-rg"' | tee backend.tfvars
              echo 'storage_account_name = "'$(StorageAccountName)'"' | tee -a backend.tfvars
              echo 'container_name = "tfstatefiles"' | tee -a backend.tfvars
              echo 'key = "dev-terraform.tfstate"' | tee -a backend.tfvars
              # Initialize Terraform.
              terraform init -input=false -backend-config="backend.tfvars"
              echo "*********** Create or select workspace"
              terraform workspace select "$(Env1)" || terraform workspace new "$(Env1)"
              #Run terraform plan
              terraform plan -var ssh_public_key=$(sshkey.secureFilePath) -out dev.tfplan
              # Apply the Terraform plan.
              terraform apply dev.tfplan
            workingDirectory: '$(Pipeline.Workspace)/terraform-manifests'
            name: 'RunTerraform'
            displayName: 'Run Terraform'
            env:
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              ARM_TENANT_ID: $(ARM_TENANT_ID)
              ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)  
    - job: Build
      continueOnError: false
      steps:
      - task: replacetokens@3
        displayName: 'Replace tokens in appsettings.json'
        inputs:
          rootDirectory: '$(System.DefaultWorkingDirectory)/src/MyHealth.Web'
          targetFiles: 'appsettings.json'
          escapeType: none
          tokenPrefix: '__'
          tokenSuffix: '__'
      - task: replacetokens@3
        displayName: 'Replace tokens in mhc-aks.yaml'
        inputs:
          rootDirectory: '$(System.DefaultWorkingDirectory)/Manifests/'
          targetFiles: 'mhc-aks.yaml'
          escapeType: none
          tokenPrefix: '__'
          tokenSuffix: '__'

      - task: DockerCompose@0
        displayName: 'Run services'
        inputs:
          dockerComposeFile: 'docker-compose.ci.build.yml'
          action: 'Run services'
          detached: false

      - task: DockerCompose@0
        displayName: 'Build services'
        inputs:
          dockerComposeFile: 'docker-compose.yml'
          dockerComposeFileArgs: 'DOCKER_BUILD_SOURCE='
          action: 'Build services'
          additionalImageTags: '$(Build.BuildId)'
          containerregistrytype: Azure Container Registry
          azureContainerRegistry: '$(ACR)'
          azureSubscriptionEndpoint: 'MHC_terraform Lab'

      - task: DockerCompose@0
        displayName: 'Push services'
        inputs:
          dockerComposeFile: 'docker-compose.yml'
          dockerComposeFileArgs: 'DOCKER_BUILD_SOURCE='
          action: 'Push services'
          additionalImageTags: '$(Build.BuildId)'
          containerregistrytype: Azure Container Registry
          azureContainerRegistry: '$(ACR)'
          azureSubscriptionEndpoint: 'MHC_terraform Lab'

      - task: DockerCompose@0
        displayName: 'Lock services'
        inputs:
          dockerComposeFile: 'docker-compose.yml'
          dockerComposeFileArgs: 'DOCKER_BUILD_SOURCE='
          action: 'Lock services'
          containerregistrytype: Azure Container Registry
          azureContainerRegistry: '$(ACR)'
          azureSubscriptionEndpoint: 'MHC_terraform Lab'
      - task: CopyFiles@2
        inputs:
          Contents: |
            **/Manifests/mhc-aks.yaml
            **/*.dacpac
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'deploy'
          publishLocation: 'Container'          

    - deployment: DeployDacPac
      displayName: 'DeployDacPac'
      dependsOn: Build
      pool:
        vmImage: 'windows-2019'
      environment: dev
      strategy:
        runOnce:
         deploy:
          steps:
          - download: current
            artifact: deploy
          - task: SqlAzureDacpacDeployment@1
            displayName: Execute Azure SQL DacpacTask
            inputs:
              azureSubscription: 'MHC_terraform Lab'
              AuthenticationType: 'server'
              ServerName: '$(SQLserver)'
              DatabaseName: 'mhcdb'
              SqlUsername: '$(SQLuser)'
              SqlPassword: '$(SQLPassword)'
              deployType: 'DacpacTask'
              DeploymentAction: 'Publish'
              DacpacFile: '$(Pipeline.Workspace)/deploy/myhealthclinic.dacpac'
              IpDetectionMethod: 'AutoDetect'
    - deployment: DeployAppsToAKS
      displayName: 'DeployAppsToAKS'
      dependsOn: DeployDacPac
      pool:
        vmImage: 'ubuntu-16.04'
      environment: dev
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: deploy
            - task: Kubernetes@1
              displayName: kubectl apply for secretType dockerRegistry
              inputs:
                connectionType: 'Azure Resource Manager'
                azureSubscriptionEndpoint: 'MHC_terraform Lab'
                azureResourceGroup: 'ask-dev-mhc-rg'
                kubernetesCluster: 'ask-dev-mhc-rg-cluster01'
                command: 'apply'
                arguments: '-f $(Pipeline.Workspace)/deploy/Manifests/mhc-aks.yaml'
                secretType: 'dockerRegistry'
                containerRegistryType: 'Azure Container Registry'
                azureSubscriptionEndpointForSecrets: 'MHC_terraform Lab'
                azureContainerRegistry: '$(ACR)'
                secretName: 'acrsecret'
                workingDirectory: '$(Pipeline.Workspace)/deploy/Manifests' 
            # - task: KubernetesManifest@0
            #   displayName: Deploy to Kubernetes cluster
            #   inputs:
            #     action: 'deploy'
            #     kubernetesServiceConnection: 'MHC_AKS'
            #     namespace: 'default'
            #     manifests: '$(Pipeline.Workspace)/deploy/Manifests/mhc-aks.yaml'
            #     containers: '$(ACR)/myhealth.web:$(Build.BuildId)'
            #     imagePullSecrets: 'acrsecret'
